name: Deploy

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am UTC
  push:
    branches:
      - main
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  depoly:
    name: Serverless
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 10
    strategy:
      matrix:
        go-version: [1.18.x]
        platform: [ubuntu-latest]
    steps:
      - name: Setup os name to lowercase
        id: os-name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ runner.os }}

      - name: Split string
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.split.outputs._2 }}

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      # Get values for cache paths to be used in later steps
      - name: Get cache directory
        id: cache-paths
        run: |
          echo "::set-output name=go-cache::$(go env GOCACHE)"
          echo "::set-output name=go-mod-cache::$(go env GOMODCACHE)"

      - name: Cache go modules
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.cache-paths.outputs.go-cache }}
            ${{ steps.cache-paths.outputs.go-mod-cache }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build
        run: go build -o main main.go
        env:
          GOOS: ${{ steps.os-name.outputs.lowercase }}
          GOARCH: amd64
          GO111MODULE: on

      - name: Setup Serverless
        uses: teakowa/setup-serverless@v2
        with:
          provider: tencent
        env:
          TENCENT_APPID: ${{ secrets.TENCENTCLOUD_APP_ID }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENTCLOUD_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENTCLOUD_SECRET_KEY}}
          SERVERLESS_PLATFORM_VENDOR: tencent

      - name: Deploy Serverless
        run: sls deploy

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs:
      - depoly
    steps:
      - name: Split Version or Branch
        uses: jungwinter/split@v2
        id: split
        with:
          separator: '/'
          msg: ${{ github.ref }}

      - name: Checkout ${{ steps.split.outputs._2 }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.split.outputs._2 }}

      - name: Lark Notification
        run: |
          curl '${{ secrets.SERVICE_UPDATES_ECHO_LARK_BOT_HOOK }}' \
             -H 'Content-Type: application/json' \
              -d '
              {
                "msg_type": "interactive",
                "card": {
                  "config": {
                    "wide_screen_mode": true
                },
                "header": {
                  "template": "green",
                  "title": {
                    "content": "‚úÖ  Production Deployment for ${{ github.repository }} ready!",
                    "tag": "plain_text"
                  }
                },
                "elements": [
                  {
                    "fields": [
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üè∑Ô∏è  VersionÔºö**\n${{ steps.split.outputs._2 }}",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üöß  StageÔºö**\n[Production](https://github.com/${{ github.repository }}/deployments/activity_log?environment=Production)",
                          "tag": "lark_md"
                        }
                      }
                    ],
                    "tag": "div"
                  },
                  {
                    "fields": [
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üî®  Latest commitÔºö**\n[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "is_short": true,
                        "text": {
                          "content": "**üîç  Latest deploy logÔºö**\n[${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                          "tag": "lark_md"
                        }
                      }
                    ],
                    "tag": "div"
                  },
                  {
                    "tag": "hr"
                  },
                  {
                    "tag": "markdown",
                    "content": "**ÊúçÂä°ÂºÄÂßãÊªöÂä®Êõ¥Êñ∞ÔºåÈ¢ÑËÆ°Âá†ÂàÜÈíüÂêéÁîüÊïà„ÄÇ**\n\n"
                  }
                ]
               }
              }'